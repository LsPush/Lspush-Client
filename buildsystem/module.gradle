subprojects {

    project.plugins.whenPluginAdded { plugin ->
        boolean appModule = 'com.android.build.gradle.AppPlugin' == plugin.class.name;
        boolean libModule = 'com.android.build.gradle.LibraryPlugin' == plugin.class.name;
        if (!appModule && !libModule) return;

        project.apply("com.getkeepsafe.dexcount")
        project.android {
            dexOptions {
                preDexLibraries !rootProject.ext.isCI
                dexInProcess = true
            }
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_7
                targetCompatibility JavaVersion.VERSION_1_7
            }
            lintOptions {
                abortOnError false
                // 除了 xml 和 html 外，还在控制台输出
                textReport true
                textOutput "stdout"

                // rhino, okio and retrofit2, https://github.com/square/okio/issues/58
                warning 'InvalidPackage'

                // We using "AES/CBC/PKCS5Padding" now. (lint has not recognized context)
                disable "TrulyRandom"
                // We might want to index our app later
                disable "GoogleAppIndexingApiWarning"
                // update sdk version until new sdk source ability
                //disable "NewerVersionAvailable"
                //disable "OldTargetApi"
                // CI issue with sdk.dir in local.properties
                disable "PropertyEscape"
                // we don't use it
                disable "AllowBackup"
                // "UnusedResources", // Unused will be removed on release
                // "IconExpectedSize", // Using the material icons provided from Google
                // "ResourceType", // Annotation binding
                // "GradleDependency"
                disable "PluralsCandidate"
            }
            packagingOptions {
                exclude 'META-INF/LICENSE.txt'
                exclude 'META-INF/NOTICE.txt'
            }
            //  testOptions.unitTests.all {
            //      testLogging {
            //          events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            //          outputs.upToDateWhen { false }
            //          showStandardStreams = true
            //      }
            //      jacoco {
            //          includeNoLocationClasses = true
            //      }
            //  }
        }

        project.repositories {
            flatDir {
                dirs 'libs'
            }
        }

//        if (appModule) {
//            // app name
//            def appConfig = project.android.defaultConfig;
//            project.android.applicationVariants.all { variant ->
//                variant.outputs.each { output ->
//                    def outputFile = output.outputFile
//                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
//                        def fileName = outputFile.name.replace("app", "${appConfig.applicationId}_${appConfig.versionName}")
//                        output.outputFile = new File(outputFile.parent, fileName)
//                    }
//                }
//            }
//        }

        //tasks.matching {it instanceof Test}.all {
        //    testLogging.events = ["failed", "passed", "skipped"]
        //}

        // Turn on logging for all tests, filter to show failures/skips only
        project.tasks.withType(Test) {
            testLogging {
                exceptionFormat "full"
                outputs.upToDateWhen { false }
                showCauses true
                showExceptions true
                showStackTraces true
                showStandardStreams true
                events = ["failed", "passed", "skipped"]
            }
        }
    }
}